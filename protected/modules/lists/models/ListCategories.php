<?php

/**
 * This is the model class for table "{{list_categories}}".
 *
 * The followings are the available columns in table '{{list_categories}}':
 * @property string $id
 * @property string $title
 * @property string $description
 * @property string $parent_id
 *
 * The followings are the available model relations:
 * @property ListCategories $parent
 * @property ListCategories[] $childs
 * @property Lists[] $lists
 * @property Lists[] $approvedLists
 * @property Tags[] $tags
 */
class ListCategories extends CActiveRecord
{
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return '{{list_categories}}';
    }
    public $formTags=[];
    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('title', 'required'),
            array('formTags', 'safe'),
            array('title, description', 'length', 'max' => 255),
            array('parent_id', 'length', 'max' => 10),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, title, description', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'parent' => array(self::BELONGS_TO, 'ListCategories', 'parent_id'),
            'childs' => array(self::HAS_MANY, 'ListCategories', 'parent_id'),
            'lists' => array(self::HAS_MANY, 'Lists', 'category_id'),
            'approvedLists' => array(self::HAS_MANY, 'Lists', 'category_id', 'condition' => 'approvedLists.status = 1'),
            'tagsRel' => array(self::HAS_MANY, 'TagRel', 'model_id',
                'on' => 'tagsRel.model_name = :model_name',
                'params' => array(':model_name' => get_class($this))
            ),
            'tags' => array(self::MANY_MANY, 'Tags', '{{tag_rel}}(model_id,tag_id)',
                'condition' => '`tags_tags`.model_name = :model_name',
                'params' => array(':model_name' => get_class($this))
            ),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
        return array(
            'id' => 'ID',
            'title' => 'عنوان',
            'description' => 'توضیحات',
            'parent_id' => 'والد',
            'formTags' => 'کلمات کلیدی',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search()
    {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('description', $this->description, true);
        $criteria->compare('parent_id', $this->parent_id, true);
        $criteria->order = 'id DESC';
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return ListCategories the static model class
     */
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    public static function getParents()
    {
        return CHtml::listData(self::model()->findAll('parent_id IS NULL'), 'id', 'title');
    }

    public function getFullTitle()
    {
        if($this->parent)
            return $this->parent->title . ' / ' . $this->title;
        else
            return $this->title;
    }

    protected function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->formTags = CHtml::listData($this->tags,'title','title');
    }

    protected function afterSave()
    {
        parent::afterSave(); // TODO: Change the autogenerated stub
        $this->formTags = isset($_POST[get_class($this)]['formTags']) ? explode(',', $_POST[get_class($this)]['formTags']) : null;
        if ($this->formTags && !empty($this->formTags)) {
            if (!$this->isNewRecord) {
                $cr = new CDbCriteria();
                $cr->compare("model_name", get_class($this));
                $cr->compare("model_id", $this->id);
                TagRel::model()->deleteAll($cr);
            }

            foreach ($this->formTags as $tag) {
                $tagModel = Tags::model()->findByAttributes(array('title' => $tag));
                if ($tagModel) {
                    $tag_rel = new TagRel();
                    $tag_rel->model_name = get_class($this);
                    $tag_rel->model_id = $this->id;
                    $tag_rel->tag_id = $tagModel->id;
                    $tag_rel->save(false);
                } else if(!empty($tag)){
                    $tagModel = new Tags();
                    $tagModel->title = $tag;
                    $tagModel->save(false);
                    $tag_rel = new TagRel();
                    $tag_rel->model_name = get_class($this);
                    $tag_rel->model_id = $this->id;
                    $tag_rel->tag_id = $tagModel->id;
                    $tag_rel->save(false);
                }
            }
        }
    }
}
